// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;

SWIFT_CLASS("_TtCC14PageController7MenuBar13ContainerView")
@interface ContainerView : UIScrollView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end

@class UITouch;
@class UIEvent;

@interface ContainerView (SWIFT_EXTENSION(PageController))
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


@interface ContainerView (SWIFT_EXTENSION(PageController)) <UIScrollViewDelegate>
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
@end


@interface ContainerView (SWIFT_EXTENSION(PageController))
@end


@interface ContainerView (SWIFT_EXTENSION(PageController))
@end

@class MenuCell;

SWIFT_CLASS("_TtC14PageController7MenuBar")
@interface MenuBar : UIView
@property (nonatomic) NSTimeInterval durationForAnimation;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull items;
- (void)registerClass:(SWIFT_METATYPE(MenuCell) _Nonnull)cellClass;
@property (nonatomic, readonly) NSInteger selectedIndex;
@property (nonatomic) CGRect frame;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) ContainerView * _Nonnull scrollView;
@end


@interface MenuBar (SWIFT_EXTENSION(PageController))
@end


@interface MenuBar (SWIFT_EXTENSION(PageController))
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
@end


@interface MenuBar (SWIFT_EXTENSION(PageController))
@end


@interface MenuBar (SWIFT_EXTENSION(PageController))
@end


@interface MenuBar (SWIFT_EXTENSION(PageController))
- (NSArray<MenuCell *> * _Nonnull)createMenuCells:(CGFloat)from distance:(CGFloat)distance index:(NSInteger)index asc:(BOOL)asc;
- (CGFloat)distanceBetweenCells:(NSInteger)from to:(NSInteger)to asc:(BOOL)asc;
@end


@interface MenuBar (SWIFT_EXTENSION(PageController))
- (void)reloadDataAtIndex:(NSInteger)index;
- (void)menubar_configure;
- (NSArray<NSValue *> * _Nonnull)measureCells;
- (MenuCell * _Nullable)createMenuCellAtIndex:(NSInteger)index;
- (void)moveFrom:(NSInteger)from until:(NSInteger)to;
- (void)revert:(NSInteger)to;
- (void)contentDidChangePageAtIndex:(NSInteger)index;
@end

@class UILabel;

SWIFT_CLASS("_TtC14PageController8MenuCell")
@interface MenuCell : UIView
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/**
  Margins between cells are zero, because it is difficult that calculating distance of scrolling. If you change margins between cell’s labels, use constentInset.
*/
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic, readonly) BOOL selected;
@property (nonatomic, strong) UIView * _Nullable backgroundView;
@property (nonatomic, strong) UIView * _Nullable selectedBackgroundView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  If property cell’s selected is changed, \code
  updateData()
  \endcode is called. You customize animations of activate to dis-activate, or dis-activate to activate, implement as override \code
  updateData()
  \endcode.
*/
- (void)updateData;
@property (nonatomic) CGRect frame;
@property (nonatomic) NSInteger index;
@end


@interface MenuCell (SWIFT_EXTENSION(PageController))
@end


@interface NSArray (SWIFT_EXTENSION(PageController))
+ (NSArray<NSNumber *> * _Nonnull)indexesBetween:(NSInteger)from to:(NSInteger)to count:(NSInteger)count asc:(BOOL)asc;
@end

@class NSBundle;

SWIFT_CLASS("_TtC14PageController14PageController")
@interface PageController : UIViewController
@property (nonatomic, strong) MenuBar * _Nonnull menuBar;
@property (nonatomic, strong) UIViewController * _Nullable visibleViewController;
@property (nonatomic, copy) NSArray<UIViewController *> * _Nonnull viewControllers;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface PageController (SWIFT_EXTENSION(PageController))
@end


@interface PageController (SWIFT_EXTENSION(PageController))
- (UIViewController * _Nullable)viewControllerForCurrentPage;
@end


@interface PageController (SWIFT_EXTENSION(PageController)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


@interface PageController (SWIFT_EXTENSION(PageController))
@end


@interface PageController (SWIFT_EXTENSION(PageController))
@property (nonatomic, readonly) CGRect frameForMenuBar;
@property (nonatomic, readonly) CGRect frameForContentController;
- (void)reloadPagesAtIndex:(NSInteger)index;
- (void)switchPageAtIndex:(NSInteger)index;
@end


@interface UIScrollView (SWIFT_EXTENSION(PageController))
- (BOOL)needsRecenter;
- (UIView * _Nullable)viewForCurrentPage;
- (CGPoint)centerForVisibleFrame;
- (void)recenterWithRelativeView:(UIView * _Nonnull)view;
@end


@interface UIView (SWIFT_EXTENSION(PageController))
- (BOOL)include:(CGRect)frame;
- (BOOL)removeIfExcluded:(CGRect)frame;
@end


@interface UIViewController (SWIFT_EXTENSION(PageController))
- (NSArray<UIViewController *> * _Nonnull)childViewControllerOrderedByX:(BOOL)asc;
@end

#pragma clang diagnostic pop
